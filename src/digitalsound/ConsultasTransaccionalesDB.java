/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package digitalsound;

import clases.DataSourceManager;
import clases.Empleados;
import clases.preguntaMasReservado; //No se ha encontrado un uso
import clases.parametrosDisponibles;
import java.sql.Connection;
import java.sql.PreparedStatement;

import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import java.util.HashMap;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author migue
 */

public class ConsultasTransaccionalesDB extends javax.swing.JFrame {
    Empleados mEmpleados = new Empleados();
    DataSourceManager dsm = new DataSourceManager();

    // Dentro de valores fields se le asigna un tipo de Field a cada 
    // variable a agregar
    // En Base a esto se define el Input a utilizar
    HashMap<String,String> valoresField = new HashMap<>(){{
        put("BotonFecha_Inicial","Fecha");
        put("BotonFecha_Final","Fecha");
        put("Tipos","Entero");
        put("Precio","Double");
        put("Longitud","Entero");
        put("BotonExportar","Exportar");
    }};
    // TODO
    
    // en base a esta biblioteca conocer las validaciones a realizar
    //Preguntas Analiticas
    // Agregar pregunta a este Arreglo
    String[] prgNoms = {"Cual es el Producto Mas Reservado?"};
    HashMap<String, ArrayList<String>> parametrosPreguntas = new HashMap<>(){{
       put("Cual es el Producto Mas Reservado?",new ArrayList<>(Arrays.asList("BotonExportar")));
    }};
    
    // Todos los valores Reservados
    preguntaMasReservado allData = new preguntaMasReservado();
    ArrayList<String> allPrgData = allData.getAllParms();
    // ^ Esto es horrible
    
    HashMap<String, ArrayList<String>> allParams = new HashMap<>(){{
        put(prgNoms[0],allPrgData );
    }};
    
    // Agregando nuevas Preguntas Analaticas
    // 1. Agregar al ArrayList en prgNoms
    // 2. Agregar al HashMap un nuevo Objeto put
    //   Como primer parametro (Llave se pone el mismo dato)
    //   que se agrego al arreglo
    //   Toma como Values (Segundo Parametro) un arreglo de Strings   
    
    
    
    HashMap<String,JComponent> activePanelContent = new HashMap<>();
    // HashMap - 
    // Podemos registrar cualquier componente
    // 1. "input_"+FieldName | Input o JDateChooser ||| "error_"+FieldName - ErrorL label || "checkBox_"+nameField
    // 2. Almacena los Inputs, los JDateChooser y los labels de error
    
    public ConsultasTransaccionalesDB(Empleados mEmpleados) {
        this.mEmpleados = mEmpleados;
        this.dsm.setTipo(this.mEmpleados.getTipo().trim());
        initComponents();
        configurarVentana();
        createContainers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        scrollCampoPreguntas = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbConsultaAnalitca = new javax.swing.JTable();
        lblPregunta = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel6.setBackground(new java.awt.Color(208, 31, 36));

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 61, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setText("Preguntas Transaccionales");

        jButton1.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jButton1.setLabel("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tbConsultaAnalitca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbConsultaAnalitca);

        lblPregunta.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        lblPregunta.setText("jLabel2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 493, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollCampoPreguntas)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollCampoPreguntas, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(lblPregunta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MenuInicio menu = new MenuInicio(mEmpleados);
        menu.setVisible(true);
        dsm = null;
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultasTransaccionalesDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultasTransaccionalesDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultasTransaccionalesDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultasTransaccionalesDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Empleados mEmpleados = new Empleados();
                new ConsultasTransaccionalesDB(mEmpleados).setVisible(true);
                
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPregunta;
    private javax.swing.JScrollPane scrollCampoPreguntas;
    private javax.swing.JTable tbConsultaAnalitca;
    // End of variables declaration//GEN-END:variables

    private void configurarVentana(){
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Digital Sound - Preguntas Analiticas");
        lblPregunta.setText("");
        
        DefaultTableModel tableModel =  new DefaultTableModel();
        this.tbConsultaAnalitca.setModel(tableModel);
        
    }
    
    public void AgregarParams(Empleados mEmpleados, String nameQuestion, ArrayList<String> currentParams, ArrayList<String>allParams){
        try{
            AgregarParametros newParams = new AgregarParametros(mEmpleados,this,nameQuestion,currentParams,allParams);
            newParams.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Error:" + e.getMessage());
        }
        
    }
    
    public void createContainers(){
        JPanel questionsContainer = new JPanel();
        questionsContainer.setLayout(new BoxLayout(questionsContainer, BoxLayout.Y_AXIS));
        
        activePanelContent.clear();
        // lo vacia para actualizar todo a
        
        // TODO
        // Hacer una funcion que automatice este proceso - HECHO
        // Crear un HashMap que contenga un String[] - SE ACTUALIZO a ARRAY LIST
        // Que tome como llave el nombre de la Clase pregunta - ..
        // Que tome como parametros, aquellos parametros que se pueden encontrar
        
        for(int i=0; i<prgNoms.length; i++){
            System.out.println("Configurando: "+prgNoms[i]); //ELIMINAR
                        
            questionsContainer.add(createPanel(prgNoms[i]));
            //Aqui agrega uno de los SubPaneles al Contenedor de Preguntas
            
            questionsContainer.add(new JSeparator(JSeparator.HORIZONTAL));
            // Aqui se agrega el borde que que se muestra Abajo de cada SUBPanel

        }
        
 
        
        // ??? Pero como se definiria el tipo de cada uno de los elementos ?
        // ^ Lo defino con el HashMap valoresField
        // ??? Como hacer para no agregar todas las opcciones de parametros y solo
        // ^ Nose xd
        
        // Agrgear un boton en la fila del titulo, pero hasta la esquina, que cuando
        // Sea presionado, oculte los parametros y el Boton de Exportar
        // Emulando un Accordion
       
        scrollCampoPreguntas.setViewportView(questionsContainer);
        scrollCampoPreguntas.revalidate();
        scrollCampoPreguntas.repaint();
        
        System.out.println("JPANEL CONFIGURADO");
    }
    
    // Se separo, ya que se porpone que se actualicen de forma 
    // Dinamica los paneles 
            
    public JPanel createPanel(String nameQuestion){
        JPanel subPanel = new JPanel();
        subPanel.setLayout(new GridBagLayout());
            
        GridBagConstraints gbc = new GridBagConstraints();
        //con este se le asignan los parametros de configuracion
            
        int gridPosY = 0;
        // con esta propiedad podremos asignar espacios
        // especificos
            
        JLabel pregunta = new JLabel("¿"+nameQuestion);
        pregunta.setFont(new Font("Pixel Operator Mono",Font.BOLD,30));
        //prgNoms es una variable con el nombre de la pregunta
        //este nombre es el mismo de la variable en el diccionario
            
        gbc.gridx = 0;
        gbc.gridy = gridPosY;
        gbc.gridwidth = 5;
        gbc.weightx = 1;
        gbc.insets =(new Insets(0,0,0,0));
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.anchor = GridBagConstraints.WEST;
        subPanel.add(pregunta, gbc);
        
        gbc.gridx = 5;
        gbc.weightx =0 ;
        gbc.gridwidth = 1;
        gbc.insets =(new Insets(0,0,0,16));
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.CENTER;
        JLabel check = new JLabel("V");
        check.setFont(new Font("Roboto", Font.PLAIN,12));
        if(parametrosPreguntas.containsKey(nameQuestion)){
            check.setText("^");
            check.setFont(new Font("Roboto", Font.PLAIN,20));
        }
        
        check.addMouseListener(new MouseListener(){ 
            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println("Clickeaste en pregunta ¿"+ nameQuestion );
            }

            @Override
            public void mousePressed(MouseEvent e) {
               
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                check.setForeground(new Color(102,204,255));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                check.setForeground(new Color(0,0,0));
            }
            
        });
        
        subPanel.add(check,gbc);

        
        // Dentro del HashMap parametrosPreguntas
        // las llaves representan las preguntas 
        // Estas preguntas deben estar almacenadas en prgNoms
        
        if(parametrosPreguntas.containsKey(nameQuestion)){
         for(int x = 0;x < parametrosPreguntas.get(nameQuestion).size();x++){
            String nameField = parametrosPreguntas.get(nameQuestion).get(x);
            System.out.println("["+(x+1)+"] Ingresando los datos de " + nameField);
            
            subPanel = createFields(nameQuestion,subPanel,nameField,gridPosY);
            //Actualiza subPanel con los cambios de la funcion
            
            if (valoresField.get(nameField).equals("Exportar")){
                // quiero que no se muestre el boton de Exportar
                // como si el Accordion estuviera cerrado
                gridPosY ++;
            }
            else{
                gridPosY +=2;
            }
            // Se aumenta en 2 ya que no se actualiza dentro de la funcion
            // Se usan 2 posiciones
            }   
        }
        return subPanel;      
    }
    
    public JPanel createFields(String nameQuestion,JPanel subPanel,String nameField, int gridPosY){
        
        int gridPosX = 0;
        GridBagConstraints gbc = new GridBagConstraints();
        
        gridPosY++;
        
        if(valoresField.get(nameField).equals("Exportar")){
            // Boton de Exportar
            // Como no cuenta con campo de Mensaje de Error
            // Decidi crear una condicion 
            
            gbc.gridy = gridPosY;
            gbc.gridx = gridPosX;
            gbc.gridwidth = 2;
            gbc.weightx = 0;
            gbc.anchor = GridBagConstraints.WEST;
            JLabel agregarParams = new JLabel("+ Agregar Parametos");
            agregarParams.setFont(new Font("Pixel Operator Mono",Font.BOLD,22));
            
            ArrayList<String> currentParams = parametrosPreguntas.get(nameQuestion);
            
            agregarParams.addMouseListener(new MouseListener(){
                @Override
                public void mouseClicked(MouseEvent e) {
                    AgregarParams(mEmpleados, nameQuestion,currentParams,allPrgData);
                }

                @Override
                public void mousePressed(MouseEvent e) {
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    agregarParams.setForeground(new Color(102,204,255));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    agregarParams.setForeground(new Color(0,0,0));
                }
            });
            
            subPanel.add(agregarParams,gbc);
            
            gridPosX=2;
            
            gbc.gridy = gridPosY;
            gbc.gridx = gridPosX;
            gbc.gridwidth = 1;
            gbc.weightx = 1.0;
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.anchor = GridBagConstraints.CENTER;
            JPanel filler = new JPanel();
            subPanel.add(filler,gbc);      
            
            gridPosX=4;
            
            gbc.gridwidth=1;
            gbc.gridy=gridPosY;
            gbc.gridx=gridPosX;
            gbc.weightx = 0;
            gbc.insets =(new Insets(0,0,4,8));
            gbc.fill = GridBagConstraints.NONE;

            JButton executeButton = new JButton("Ejecutar");
            executeButton.setFont(new Font("Roboto",Font.BOLD,18));
            executeButton.addMouseListener(new MouseListener(){
                @Override
                public void mouseClicked(MouseEvent e) {
                    validateData(nameQuestion);
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    executeButton.setForeground(new Color(102,204,255));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    executeButton.setForeground(new Color(0,0,0));
                }
                
            });
            
            subPanel.add(executeButton,gbc);
            
            return subPanel;
        }
            
        gbc.gridx = gridPosX;
        gbc.gridy = gridPosY;
        gbc.gridwidth = 1;
        gbc.weightx = 0;
        gbc.anchor = GridBagConstraints.WEST;
                
        JCheckBox checkFechaInicial = new JCheckBox(nameField);
        checkFechaInicial.setFont(new Font("Pixel Operator Mono",Font.BOLD,22));
        checkFechaInicial.setSelected(true);
        subPanel.add(checkFechaInicial,gbc);
        
        activePanelContent.put("checkBox_"+nameField, checkFechaInicial);
                
        gridPosX++;
        
        switch(valoresField.get(nameField)){
            case "Fecha" -> {
                JDateChooser calendario = new JDateChooser();
                    calendario.setPreferredSize(new Dimension(200,30));
                    gbc.gridx=gridPosX;
                    calendario.addMouseListener(new MouseListener(){
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        clearErrorMessage(nameField);
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                    
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                    
                    }
                        
                    });
                    
                    subPanel.add(calendario,gbc);
                    System.out.println("Agregando: input_"+nameField);
                    activePanelContent.put("input_"+nameField, calendario);
                }
                        
                default -> {
                    JTextField txtInput = new JTextField();
                    txtInput.setPreferredSize(new Dimension(200,30));
                    gbc.gridx=gridPosX;
                    
                   txtInput.addMouseListener(new MouseListener(){
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            clearErrorMessage(nameField);
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
   
                   });
                   
                   txtInput.addKeyListener(new KeyListener(){
                        @Override
                        public void keyTyped(KeyEvent e) {
                            clearErrorMessage(nameField);
                        }

                        @Override
                        public void keyPressed(KeyEvent e) {
                        }

                        @Override
                        public void keyReleased(KeyEvent e) {
                        }
                    });
                    
                    subPanel.add(txtInput,gbc);
                    System.out.println("Agregando: input_"+nameField);
                    activePanelContent.put("input_"+nameField, txtInput);
                    System.out.println("Estoy dentro? :"+activePanelContent.containsKey("input_"+nameField));
                }
            }
                 
        gridPosX++;
        gbc.gridx = gridPosX;
        gbc.weightx = 1.0;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JPanel filler = new JPanel();
        subPanel.add(filler,gbc);
        
        // Mensaje de error
        gridPosX = 0;
        gridPosY++;                
        gbc.gridy = gridPosY;
        gbc.gridx = gridPosX;
        gbc.gridwidth = 1;
                
        subPanel.add(filler,gbc);
                
        gridPosX++;
                
        JLabel errorMessage = new JLabel("");
        errorMessage.setFont(new Font("Pixel Operator Mono",Font.BOLD,10));
        errorMessage.setForeground(new Color(208,31,36));
                
        gbc.gridx = gridPosX;
        gbc.gridy = gridPosY;
        gbc.weightx = 0.0;
        gbc.fill = GridBagConstraints.WEST;
                
        subPanel.add(errorMessage,gbc);
        activePanelContent.put("error_"+nameField, errorMessage);
                
        gridPosX++;
        gbc.gridx=gridPosX;
        gbc.gridwidth=2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
                
        subPanel.add(filler,gbc);
        
        return subPanel;
        // re escribe el subPanel cada vez que se realiza un cambio
    }
    
    public void ActualizarParametros(String nameQuestion, ArrayList<String>updatedCurrentParams){
        parametrosPreguntas.remove(nameQuestion);
        parametrosPreguntas.put(nameQuestion, updatedCurrentParams);
        
        createContainers();
    }
    
    public void validateData(String nameQuestion){
        parametrosDisponibles param = new parametrosDisponibles();
        System.out.println("parametrosDisponibles");
        System.out.println("Rendered Elements: "+activePanelContent.containsKey("error_Tipos"));
        System.out.println("Prueba Validate, Estoy dentro? :"+activePanelContent.containsKey("input_Tipos"));
        System.out.println("Current Params: "+parametrosPreguntas.get(nameQuestion));
        
        param.validateDatos(nameQuestion,this, activePanelContent, parametrosPreguntas.get(nameQuestion));
    }
    
    public void Verificado(String nameQuestion, HashMap<String,String> notValidData, HashMap<String,String> validData){
        if(notValidData.isEmpty() ){
            System.out.println("No hubo errores");
            
            try{
                makeDBRequest(validData);
            }catch(SQLException e){
                //Aqui poner error
            }
        }else{
            System.out.println("Hubo errores");
            
            for(int y = 0;y<parametrosPreguntas.size();y++){
                if(notValidData.containsKey((parametrosPreguntas.get(nameQuestion).get(y)))){
                   JLabel errorMessage = (JLabel) activePanelContent.get("error_"+parametrosPreguntas.get(nameQuestion).get(y));
                   errorMessage.setText(notValidData.get(parametrosPreguntas.get(nameQuestion).get(y)));
                   
                   activePanelContent.put("error_"+parametrosPreguntas.get(nameQuestion).get(y),errorMessage); 
                }
                //TODO
                // actualizar para que en vez de que sea 0, sea un
                // String que almacene la pregunta
                
                scrollCampoPreguntas.revalidate();
                scrollCampoPreguntas.repaint();
                // recarga?
            }
        }
    }
    
    public void clearErrorMessage(String nameField){
        JLabel errorMessage = (JLabel) activePanelContent.get("error_"+nameField);
        errorMessage.setText("");
        activePanelContent.put("error_"+nameField,errorMessage);
        scrollCampoPreguntas.revalidate();
        scrollCampoPreguntas.repaint();
    }
    
    public void llenarTabla(ResultSet rs){
        
    }
    
    public void makeDBRequest(HashMap<String, String> validData) throws SQLException{
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        
        String queryBuilder = "Select Apartado_idProducto as ID_Producto, " +
            "productos.NombreProducto as Nom_Producto, " +
            "sum(Cantidad) as Num_Reservas " +
            "from productoApartado " +
            "inner join productos "+
            "on productos.idProducto = productoApartado.Apartado_idProducto ";
        
        if(validData.containsKey("Fecha_Inicial")){
            if(validData.containsKey("Fecha_Final")){
                queryBuilder += " where ticketreserva.FechaApartado bewteen '"+validData.get("Fecha_Inicial");
                queryBuilder += "' and '"+validData.get("Fecha_Final")+"' ";
            }else{
                queryBuilder += " where ticketreserva.FechaApartado bewteen '"+validData.get("Fecha_Inicial");
                queryBuilder += "' and '"+validData.get("Fecha_Inicial")+"' ";
            }
        }
        
        if(validData.containsKey("Tipos")){
            if(validData.containsKey("FechaFinal")){
                queryBuilder += " AND Productos_idTipo in ("+validData.get("Tipos")+")";
            }else{
                queryBuilder += " where Productos_idTipo in ("+validData.get("Tipos")+")";
           }
        }
        
        queryBuilder += " group by Apartado_idProducto ";
        queryBuilder += " order by Num_Reservas DESC ";

        if(validData.containsKey("Longitud")){
           queryBuilder += " LIMIT "+validData.get("Longitud");
        }

        queryBuilder +=";";
        System.out.println("Query :"+queryBuilder);
        
        try{
            con = dsm.getDataSource().getConnection();
            pst = con.prepareStatement(queryBuilder);
            rs = pst.executeQuery();
            
            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"ID_Producto","Nom_Producto","NumReservas"},0); 
            Font newFont = new Font("Segoe UI", Font.PLAIN, 14); // Crear una nueva fuente
            this.tbConsultaAnalitca.setFont(newFont);
            this.tbConsultaAnalitca.getTableHeader().setFont(newFont);
            this.tbConsultaAnalitca.setRowHeight(this.tbConsultaAnalitca.getFont().getSize()+10);
            
            while(rs.next()){
                tableModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3)});
            }
            
            this.tbConsultaAnalitca.setModel(tableModel);
            this.tbConsultaAnalitca.revalidate();
            this.tbConsultaAnalitca.repaint();
        }catch(Exception e){
            JOptionPane.showConfirmDialog(this,"Error: "+ e);
        }
        finally{
            if(rs != null){
                rs.close();
            }
            if(pst != null){
                pst.close();
            }
            if(con != null){
                con.close(); 
            }
        }
    }
    
    
}
