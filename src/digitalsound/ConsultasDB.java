/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package digitalsound;
import clases.DataSourceManager;
import clases.Empleados;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;

import java.util.ArrayList;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.apache.poi.xssf.streaming.SXSSFSheet;

import org.apache.poi.xssf.streaming.SXSSFWorkbook;

/**
 *
 * @author migue
 */
public class ConsultasDB extends javax.swing.JFrame {
    Empleados mEmpleados = new Empleados();
    DataSourceManager dsm = new DataSourceManager();
    ArrayList mListaTablas;
    ArrayList mParams;
    int numberParams = 0;
    
    private Map<String, JCheckBox> camposCheck = new HashMap<>();
    // se declaro una tabla de Has donde se obtienen almacenan los datos  
    // Los datos para acceder a estos elementos son strings, y dentro del map
    // se almacenan elementos checkbox
    
    /**
     * Creates new form consultasDB
     */
    public ConsultasDB(Empleados empleado){
        initComponents();
        mEmpleados = empleado;
        dsm.setTipo(mEmpleados.getTipo().trim());
        //En data sourceManager se debe de asignar el tipo para inicializarlo de forma correcta
        // Solo usuario de tipo Gerente puede acceder, debido a que pide informacion sensible
        
        llenarCbTablas();
        loadParams();
        
        cBoxTable.addActionListener(new ActionListener (){
        // se supone escucha los eventos        
            @Override
            public void actionPerformed(ActionEvent e) {
                loadParams();
            }
        });
        
        configurarVentana();
    }
    
    private void configurarVentana(){
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("Digital Sound - Lista de apartados");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnExportar = new javax.swing.JButton();
        cBoxTable = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        scrollParams = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(208, 31, 36));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/soundchico.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jLabel1)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        btnExportar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnExportar.setText("EXPORTAR");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        cBoxTable.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        cBoxTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel2.setText("Consulta de Base de datos");

        jButton1.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jButton1.setLabel("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        scrollParams.setBackground(new java.awt.Color(255, 255, 255));
        scrollParams.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cBoxTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollParams)
                    .addComponent(btnExportar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cBoxTable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(scrollParams, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        cBoxTable.getAccessibleContext().setAccessibleName("cbTables");
        jLabel2.getAccessibleContext().setAccessibleName("lbl.Title");
        jButton1.getAccessibleContext().setAccessibleName("btnMenu");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MenuInicio menu = new MenuInicio(mEmpleados);
        menu.setVisible(true);
        dsm = null;
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:
        exportarArchivo();
//        fileEntrada(workbook,fileName);
    }//GEN-LAST:event_btnExportarActionPerformed

    public void exportarArchivo(){
        String filename = cBoxTable.getSelectedItem().toString();
        SXSSFWorkbook workbook = new SXSSFWorkbook();
        SXSSFSheet hoja = workbook.createSheet(filename);
        
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet resultados = null;
        
        int currentRow = 0;
        // Crear variable que cuente la fila actual
        // Se carga la primera columna con los nombres de la tabla        
        
        String message = "";
        
        List<String> selectedParams = new ArrayList<>(); 
        
        try{
            hoja.createRow(currentRow);
            System.out.println("Parametros tabla "+filename);
            
            int numOfActiveParams = 0;
            String sqlRequest = "Select ";
            
            for(int i=0;i<numberParams;i++){
                if(camposCheck.get(mParams.get(i).toString()).isSelected()){
                    hoja.getRow(currentRow).createCell(numOfActiveParams).setCellValue(mParams.get(i).toString());
                    // Obtiene la Variable current Row, que por defecto es 0
                    // crea la celda en base al numero de Parametro activo
                    // Obtiene su valor, en base a la posicion actual de su arreglo
                    
                    System.out.println(mParams.get(i).toString());
                    selectedParams.add(mParams.get(i).toString());
                    if(numOfActiveParams == 0){
                        sqlRequest += mParams.get(i).toString();
                    }
                    else{
                        sqlRequest += (", "+mParams.get(i).toString());
                    }
                    numOfActiveParams++;
                }
            }
            
            sqlRequest += (" from "+filename+";");
            System.out.println("SqlRequest: "+sqlRequest);
            
            String[] activeParams = selectedParams.toArray(new String[0]);
            
            con = dsm.getDataSource().getConnection();
            
            pst = con.prepareStatement(sqlRequest);
            // Actualizar esto para que tome los parametros que tengan valor true en la bd            
            resultados = pst.executeQuery();
            while(resultados.next()){
                currentRow++;
                hoja.createRow(currentRow);
                for(int i = 0;i<numOfActiveParams;i++){
//                    String param = mParams.get(i).toString();
                        hoja.getRow(currentRow).createCell(i).setCellValue(resultados.getString(activeParams[i]));
                }
            }
            
            // Obtiene la direccion actual del proyecto
            Path currentRelativePath = Paths.get("");
            String pathActual = currentRelativePath.toAbsolutePath().toString();
            
            // Verifica si existe una direccion Archivos Exce, dentro del directorio actual
            File dirExcel = new File (pathActual+"\\ArchivosExcel");
            
            if(!dirExcel.exists()){
                dirExcel.mkdirs(); //Si no existe lo crea 
                System.out.println("Cree un nuevo directorio, porque no existia Archivos Excel");
            }
            
            System.out.println("Direccion actual: "+ dirExcel);
            FileOutputStream archivo = new FileOutputStream(dirExcel.getAbsolutePath()+"\\"+filename+".xlsx");
            workbook.write(archivo);
            archivo.close();
            message = "Se completo de forma exitosa el proceso";
        }catch(SQLException e){
            e.printStackTrace();
            message = ("Hubo un error al conectarse con la base de datos "+e);
        }
        catch(Exception e){
            e.printStackTrace();
            message = ("Hubo un error al crear el archivo: "+e);
        }
        finally{
            //Jframe despues agrego 
            JOptionPane.showMessageDialog(this, message);
        }
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Empleados mEmpleados = new Empleados();
                new ConsultasDB(mEmpleados).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JComboBox<String> cBoxTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scrollParams;
    // End of variables declaration//GEN-END:variables

    public void llenarCbTablas(){
        cBoxTable.removeAllItems();
        
        try{
            mListaTablas = getListaTablas();
        }catch(SQLException e){
           e.printStackTrace();
        }
        Iterator iterador = mListaTablas.iterator();
        while(iterador.hasNext()){
            var elementoTabla = iterador.next();
            if(elementoTabla != null){
                cBoxTable.addItem(elementoTabla.toString());
            }
        }
        
    }
    
    public ArrayList getListaTablas() throws SQLException{
        ArrayList listaTablas = new ArrayList();
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet resultado = null;
        try{
            con = dsm.getDataSource().getConnection();
            pst = con.prepareStatement("CALL consultaTablas();");
            resultado = pst.executeQuery();
            while(resultado.next()){
                var nombreTabla = resultado.getString("Tables_in_sistemaapartado");
                listaTablas.add(nombreTabla);
            }
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            if(resultado != null){
                resultado.close();
            }
            if(pst != null){
                pst.close();
            }
            if(con != null){
                con.close();
            }
        }
        return listaTablas;
                
    }
    
    
    private void loadParams(){
        System.out.println("Tabla a cargar: "+cBoxTable.getSelectedItem().toString());
        try{
            cargarParams(cBoxTable.getSelectedItem().toString());
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    
    private void cargarParams(String nombreTabla) throws SQLException{
        mParams = new ArrayList();
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet resultados = null;
       
        camposCheck.clear();
        numberParams = 0;
        //esta variable guarda el numero de Checklist activas
        
        JPanel contenedor = new JPanel();
        contenedor.setLayout(new BoxLayout(contenedor, BoxLayout.Y_AXIS));
        // Dentro de Set Layout se define que el orden en el que se acomodan sus elementos es vertical        
        
        try{
            con = dsm.getDataSource().getConnection();
            pst = con.prepareStatement("DESC "+nombreTabla);
            resultados = pst.executeQuery();
            while(resultados.next()){
                //Hacer que cree un objeto pero por mientras imprimirlo
                String nombreParam = resultados.getString("Field");
                
                System.out.println(nombreParam);
                mParams.add(nombreParam);
//                ParamsTabla.add(resultados.getString("Field"),resultados.getString("Type"));
                
//              SubPaneles
                JPanel panelParametro = new JPanel();
                panelParametro.setLayout(new FlowLayout(FlowLayout.LEFT));
                panelParametro.setBorder(BorderFactory.createTitledBorder("Param"));
                // Define las propiedades y la direccion del texto Izquierda a Derecha
                
                JCheckBox check = new JCheckBox(nombreParam);
                check.setFont(new Font("Pixel Operator Mono", Font.BOLD, 18));
                check.setSelected(true);
                check.addItemListener(new ItemListener(){
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        isExportActive();
                    }
                });
                
                panelParametro.add(check);
                contenedor.add(panelParametro);
                
                scrollParams.setViewportView(contenedor);
                scrollParams.revalidate();
                scrollParams.repaint();
                
                camposCheck.put(nombreParam,check);
                numberParams +=1;
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            if(resultados != null){
                resultados.close();
            }
            if(pst != null){
                pst.close();
            }
            if(con != null){
                con.close();
            }
        }
        
    }
    
    public void isExportActive(){
        boolean btnState = false;
        System.out.println("Prueba activo");
        for(int i=0; i<numberParams;i++){
            System.out.println(mParams.get(i).toString());
            if(camposCheck.get(mParams.get(i).toString()).isSelected()){
                System.out.println(camposCheck.get(mParams.get(i).toString()).getSelectedObjects().length);
                btnState= true;
                break;
            }
            else{
                System.out.println("Inactivo");
            }
        }
        
        btnExportar.setEnabled(btnState);
    }
    
}
